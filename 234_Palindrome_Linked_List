# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:

        ## Version 1
        ## time O(n), space O(n)
        fast = slow = ListNode(0)
        fast = slow = head
        stack = []
        
        while fast and fast.next:
            stack.append(slow.val)
            slow = slow.next
            fast = fast.next.next
            
        if fast:
            slow = slow.next
            
        while slow:
            stack_value = stack.pop()
            if stack_value != slow.val:
                return False
            slow = slow.next
        return True
        
    ## Version 2
    ## time O(n), space O(1)
    #     while fast and fast.next:
    #         stack.append(slow.val)
    #         slow = slow.next
    #         fast = fast.next.next
            
    #     slow = slow.next
    #     slow = self.Reverse_liked_list(slow)
        
    #     while slow:
    #         if head.val != slow.val:
    #             return False
    #         head = head.next
    #         slow = slow.next
    #     return True
    
    # def Reverse_liked_list(self, head):
    #     prev = None
    #     next_node = head.next
    #     head.next = prev
    #     prev = head
    #     head = next_node
    #     return head